buildscript {
  ext.kotlinVersion = '1.4.30'
  ext.junitVersion = '4.13'
  ext.assertjVersion = '3.15.0'
  ext.agpVersion = '3.6.0'
  ext.dokkaVersion = '0.9.18'
  ext.retrofitVersion = '2.7.1'
  ext.moshiVersion = '1.11.0'

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath 'com.gradle.publish:plugin-publish-plugin:0.11.0'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
    classpath 'com.vanniktech:gradle-code-quality-tools-plugin:0.19.0'
    classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.15.0'
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.12.0'
  }
}

apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.vanniktech.code.quality.tools'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: "com.vanniktech.maven.publish"
apply plugin: 'com.gradle.plugin-publish'
apply from: "gradle/integration-test.gradle"

codeQualityTools {
  ktlint {
    toolVersion = '0.31.0'
  }
  detekt {
    toolVersion = '1.0.0'
  }
  pmd {
    enabled = false
  }
  checkstyle {
    enabled = false
  }
  cpd {
    enabled = false
  }
  errorProne {
    enabled = false
  }
}

gradlePlugin {
  plugins {
    mavenPublishPlugin {
      id = 'com.vanniktech.maven.publish'
      implementationClass = 'com.vanniktech.maven.publish.MavenPublishPlugin'
    }
    mavenPublishBasePlugin {
      id = 'com.vanniktech.maven.publish.base'
      implementationClass = 'com.vanniktech.maven.publish.MavenPublishBasePlugin'
    }
  }
}

repositories {
  mavenCentral()
  google()
  jcenter()
}

dependencies {
  api gradleApi()
  api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

  compileOnly "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
  compileOnly "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaVersion"
  compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  compileOnly "com.android.tools.build:gradle:$agpVersion"

  kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

  implementation "com.squareup.moshi:moshi:$moshiVersion"
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.assertj:assertj-core:$assertjVersion"
  testImplementation "com.android.tools.build:gradle:$agpVersion"
  testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
  testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  testImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  testImplementation "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
  testImplementation "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaVersion"

  integrationTestImplementation gradleTestKit()
  integrationTestImplementation "junit:junit:$junitVersion"
  integrationTestImplementation "org.assertj:assertj-core:$assertjVersion"
}

sourceCompatibility = JavaVersion.VERSION_1_7

signing {
  if (project.hasProperty('SIGNING_PRIVATE_KEY') && project.hasProperty('SIGNING_PASSWORD')) {
    useInMemoryPgpKeys(project.getProperty('SIGNING_PRIVATE_KEY'), project.getProperty('SIGNING_PASSWORD'))
  }
}

pluginBundle {
  website = POM_URL
  vcsUrl = POM_SCM_URL

  plugins {
    mavenPublishPlugin {
      displayName = POM_NAME
      tags = ['gradle', 'android', 'kotlin', 'maven', 'publish', 'library']
      description = POM_DESCRIPTION
    }
  }
}

wrapper {
  gradleVersion = '5.4.1'
  distributionType = Wrapper.DistributionType.ALL
}

configurations.all {
  resolutionStrategy {
    force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  }
}

test {
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}
